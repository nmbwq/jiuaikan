package top.wzmyyj.zymk.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import top.wzmyyj.zymk.model.db.dao.HistoryDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_DB".
*/
public class HistoryDbDao extends AbstractDao<HistoryDb, Long> {

    public static final String TABLENAME = "HISTORY_DB";

    /**
     * Properties of entity HistoryDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property History_chapter_id = new Property(2, long.class, "history_chapter_id", false, "HISTORY_CHAPTER_ID");
        public final static Property History_chapter_name = new Property(3, String.class, "history_chapter_name", false, "HISTORY_CHAPTER_NAME");
        public final static Property History_read_time = new Property(4, long.class, "history_read_time", false, "HISTORY_READ_TIME");
    }


    public HistoryDbDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"HISTORY_CHAPTER_ID\" INTEGER NOT NULL ," + // 2: history_chapter_id
                "\"HISTORY_CHAPTER_NAME\" TEXT," + // 3: history_chapter_name
                "\"HISTORY_READ_TIME\" INTEGER NOT NULL );"); // 4: history_read_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
        stmt.bindLong(3, entity.getHistory_chapter_id());
 
        String history_chapter_name = entity.getHistory_chapter_name();
        if (history_chapter_name != null) {
            stmt.bindString(4, history_chapter_name);
        }
        stmt.bindLong(5, entity.getHistory_read_time());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
        stmt.bindLong(3, entity.getHistory_chapter_id());
 
        String history_chapter_name = entity.getHistory_chapter_name();
        if (history_chapter_name != null) {
            stmt.bindString(4, history_chapter_name);
        }
        stmt.bindLong(5, entity.getHistory_read_time());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HistoryDb readEntity(Cursor cursor, int offset) {
        HistoryDb entity = new HistoryDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.getLong(offset + 2), // history_chapter_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // history_chapter_name
            cursor.getLong(offset + 4) // history_read_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setHistory_chapter_id(cursor.getLong(offset + 2));
        entity.setHistory_chapter_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHistory_read_time(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistoryDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistoryDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryDb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
